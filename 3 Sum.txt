3 Sum


Separate all positive, negative and 0’s into separate lists
If the len(list[0’s]) > 0, then check if for every +ve number its counterpart exists in the [-ve] numbers. If it exists, then append +ve,0,-ve to the res[]


If the len(list[0’s]) >= 3 then [0,0,0] should be appended to the res[]


Now for every p[i] and p[i+1] check if complement of their sum exists in the -ve[], if it exists append [p[i],p[i+1],target] to res[]


Now for every n[i] and n[i+1] check if complement of their sum exists in the +ve[], if it exists append [n[i],n[i+1],target] to res[]

#using 2 pointers


class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:




        res = set()


        #1. Split nums into three lists: negative numbers, positive numbers, and zeros
        n, p, z = [], [], []
        for num in nums:
            if num > 0:
                p.append(num)
            elif num < 0: 
                n.append(num)
            else:
                z.append(num)


        #2. Create a separate set for negatives and positives for O(1) look-up times
        N, P = set(n), set(p)


        #3. If there is at least 1 zero in the list, add all cases where -num exists in N and num exists in P
        #   i.e. (-3, 0, 3) = 0
        if z:
            for num in P:
                if -1*num in N:
                    res.add((-1*num, 0, num))


        #3. If there are at least 3 zeros in the list then also include (0, 0, 0) = 0
        if len(z) >= 3:
            res.add((0,0,0))


        #4. For all pairs of negative numbers (-3, -1), check to see if their complement (4)
        #   exists in the positive number set
        for i in range(len(n)):
            for j in range(i+1,len(n)):
                target = -1*(n[i]+n[j])
                if target in P:
                    res.add(tuple(sorted([n[i],n[j],target])))


        #5. For all pairs of positive numbers (1, 1), check to see if their complement (-2)
        #   exists in the negative number set
        for i in range(len(p)):
            for j in range(i+1,len(p)):
                target = -1*(p[i]+p[j])
                if target in N:
                    res.add(tuple(sorted([p[i],p[j],target])))


        return res